@startuml
autonumber
!theme reddress-lightblue
skinparam BoxPadding 10
skinparam roundcorner 20
skinparam SequenceGroupHeaderFontColor darkblue
skinparam SequenceGroupFontColor darkblue
skinparam SequenceBoxBackgroundColor White
skinparam shadowing false

center header Strategic Conflict Detection
title Notification to Operator of Existing Operational Intent Due to Disallowed Conflict with Equal Priority New and Modified Operational Intent

participant "Test Driver" as TD
participant "DSS" as DSS
box ""USS under test""
    participant "USS" as USS
    participant "Automated Testing Interfaces" as USSInter
end box


== Setup ==
' Clear area
TD -> USSInter++: Inject clear area request\nPOST /clear_area_requests
return 200, {"outcome": {"success": true, "message": {}, "details": {}}}


== Test Case 1 - Test New Conflicting Operational Intent ==

' Inject control operational intent in planned state
TD -> USSInter++: Inject control operational intent (Planned)\nPUT /flight_plans/{flight_id}
USS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
alt #GhostWhite Pass: Accepted
        TD <-- USSInter: 200, {"planning_result": "Completed"}
else #Pink Failure: Rejected
        TD <-- USSInter--: 200, {"planning_result": "Rejected"}
end

' Check if operational intent is discoverable (determine if insert or update)
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
alt discoverable operational intent
        TD -> TD: save operational intent reference
else operational intent is new
end


' Inject new conflicting operational intent in planned state
TD -> USSInter++: Inject conflicting operational intent (Planned)\nPUT /flight_plans/{flight_id}
alt #GhostWhite Pass: Disallowed conflict
  TD <-- USSInter: 200, {"planning_result": "Rejected"}
else #Pink Failure: Allowed conflict
  TD <-- USSInter--: 200, {"planning_result": "Completed"}
end

' verify new operational intent not added
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
alt #GhostWhite Pass: No new operational intent
        TD -> TD: No new operational intent found
else #Pink Failure: Changes made to the DSS
end
 
TD -> TD: wait for 12 seconds

TD -> USSInter++: Retrieve notification message log\nGET uss/v1/user_notifications?from=[ISO_DATETIME]&to=[ISO_DATETIME]
return 200, {...}
note right
interUSS working draft
"F3548-21 - User notification test"
end note

loop For every USS notification
  alt #GhostWhite Pass: USS was notified
    TD -> TD: User received required conflict notification within required time
  else #Pink Failure: USS was not notified
    TD -> TD: Notification not received or notification to user exceeds required time
  end
end

 == Test Case 2 - Test Modified Conflicting Operational Intent ==
  
' inject operational intent in planned state
TD -> USSInter++: Inject non-conflicting operational intent (Planned)\nPUT /flight_plans/{flight_plan_id}
USS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
 alt #GhostWhite Pass: Accepted
        TD <-- USSInter: 200, {"planning_result": "Completed"}
else #Pink Failure: Rejected
        TD <-- USSInter--: 200, {"planning_result": "Rejected"}
end
  
' Check if operational intent is discoverable (determine if insert or update)
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
alt discoverable operational intents
        TD -> TD: save operational intent references
else new and existing operational intents
end
  
' Inject modified operational intent to conflict
TD -> USSInter++: Inject conflicting operational intent modification (Planned)\nPUT /flight_plans/{flight_id}
alt #GhostWhite Pass: Disallowed conflict
  TD <-- USSInter: 200, {"planned_response": "Rejected"}
else #Pink Failure: Allowed conflict
  TD <-- USSInter--: 200, {"planned_response": "Completed"}
end 
 
TD -> USSInter++: Retrieve operational intent details\nGET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}

alt #GhostWhite Pass: No changes
        TD -> TD: Check planned operational intent was not modified
else #Pink Failure: Operational intent changed
end

'verify operational intent not modified
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
alt #GhostWhite Pass: No operational intent update
        TD -> TD: Check version of operational intent not changed
else #Pink Failure: Changes made to the DSS
end
  
TD -> TD: wait for 12 seconds

TD -> USSInter++: Retrieve notification message log\nGET uss/v1/user_notifications?from=[ISO_DATETIME]&to=[ISO_DATETIME]
return 200, {...}
note right
interUSS working draft
"F3548-21 - User notification test"
end note

loop For every USS notification
  alt #GhostWhite Pass: USS was notified
    TD -> TD: User received required conflict notification within required time
  else #Pink Failure: USS was not notified
    TD -> TD: User not notified or notification to user exceeds require time
  end
end
 

== Teardown ==
' terminate operational intent
TD -> USSInter++: Remove first operational intent\nDELETE /flight_plans/{flight_id}
USS -> DSS++: DELETE /dss/v1/operational_intent_references/{entity_id}/{ovn}
return 200, {"subscribers": [], "operational_intent_reference": {...}}
TD <-- USSInter--: 200, {"subscribers": [], "operational_intent_reference": {...}}

TD -> USSInter++: Remove second operational intent\nDELETE /flight_plans/{flight_id}
USS -> DSS++: DELETE /dss/v1/operational_intent_references/{entity_id}/{ovn}
return 200, {"subscribers": [], "operational_intent_reference": {...}}
TD <-- USSInter--: 200, {"subscribers": [], "operational_intent_reference": {...}}

@enduml