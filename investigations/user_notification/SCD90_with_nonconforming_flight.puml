@startuml
autonumber
!theme reddress-lightblue
skinparam BoxPadding 10
skinparam roundcorner 20
skinparam SequenceGroupHeaderFontColor darkblue
skinparam SequenceGroupFontColor darkblue
skinparam SequenceBoxBackgroundColor White
skinparam shadowing false


center header Strategic Conflict Detection
title SCD0090: Notification to Operator of New or Modified Nonconforming Operational Intent Due to Conflict

participant "Test Driver" as TD
participant "Other USS" as OUSS
participant "DSS" as DSS
box ""USS under test""
    participant "USS" as USS
    participant "Automated Testing Interfaces" as USSInter
end box



== Setup ==
' clear area
TD -> OUSS++: Inject clear area request\nPOST /clear_area_requests
return 200, {"outcome": {"success": true, "message": {}, "details": {}}}
TD -> USSInter++: Inject clear area request\nPOST /clear_area_requests
return 200, {"outcome": {"success": true, "message": {}, "details": {}}}

' inject operational intent in planned state
TD -> OUSS++: Inject operational intent (Planned)\nPUT /flight_plans/{flight_plan_id}
OUSS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
alt #GhostWhite Pass: Completed
        TD <-- OUSS: 200, {"planning_result": "Completed"}
else #Pink Failure: Rejected
        TD <-- OUSS--: 200, {"planning_result": "Rejected"}
end
 
 
'check if new operational intent is discoverable
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
TD -> OUSS++: Retrieve operational intent details\nGET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}
alt #GhostWhite Pass: Discoverable operational intent
        TD -> TD: Check operational intent discoverable (save)
else #Pink Failure: No operational intent found
end
 
== Test Case 1 - Test New Conflicting Operational Intent ==
 
' Test case 1: Create new Nonconforming OI that conflict with existing OI and user notified 

' Inject operational intent in Nonconforming state that conflicts with existing OI
TD -> USSInter++: Inject conflicting operational intent (Nonconforming)\nPUT /flight_plans/{flight_plan_id}
USS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
alt #GhostWhite Pass: Allowed conflict
        TD <-- USSInter: 200, {"planning_result": "Completed"}
else #Pink Failure: Disallowed conflict
        TD <-- USSInter--: 200, {"planning_result": "Rejected"}
end
 
' Verify new operational intent added
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}

' Verify conflict details
TD -> USSInter++: Retrieve operational intent details\nGET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}

alt #GhostWhite Pass: Allowed conflict
        TD -> TD: Check new Nonconforming operational intent discoverable and conflicts with preexisting operational intent
else #Pink Failure: Nonconforming operational intent not added or no conflict
end
 
TD -> TD: wait for 12 seconds

TD -> USSInter++: Retrieve notification message log\nGET uss/v1/user_notifications?from=[ISO_DATETIME]&to=[ISO_DATETIME]
return 200, {...}
note right
interUSS working draft
"F3548-21 - User notification test"
end note

loop For every USS user notification
alt #GhostWhite Pass: USS sent conflict notification to user in time
    TD -> TD: USS sent user required conflict notification within required time
else #Pink Failure: USS did not send notification to user or notification not sent in time
    TD -> TD: USS did not send user notification or notification exceeded required time
end
end 

' Remove conflicting operational intent
TD -> USSInter++: Remove Nonconforming operational intent\nDELETE /uss/v1/inject/flights/{flight_id}
USS -> DSS++: DELETE /dss/v1/operational_intent_references/{entity_id}/{ovn}
return 200, {"subscribers": [], "operational_intent_reference": {...}}
TD <-- USSInter--: 200, {"subscribers": [], "operational_intent_reference": {...}}
  
' Verify conflicting operational intent removed
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}

alt #GhostWhite Pass: Conflicting operational intent removed
  TD -> TD: Check conflicting Nonconforming operational intent does not exist
else #Pink Failure: Conflicting operational intent still exists
end
 

== Test Case 2 - Test Modified Conflicting Operational Intent ==

' Test case 2: Modify planned nonconflicting OI to Nonconforming state that conflicts with existing OI and user notified

' Inject non-conflicting operational intent in planned state
TD -> USSInter++: Inject non-conflicting operational intent (Planned)\nPUT /flight_plans/{flight_plan_id}
' Query for existing operations
USS -> DSS++: POST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": {...}}
' Check existing operation
USS -> OUSS++: GET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}
USS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
alt #GhostWhite Pass: Completed
        TD <-- USSInter: 200, {"planning_result": "Completed"}
else #Pink Failure: Rejected
        TD <-- USSInter--: 200, {"planning_result": "Rejected"}
end

'check if new operational intent is discoverable 
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}
TD -> USSInter++: Retrieve operational intent details\nGET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}
alt #GhostWhite Pass: Discoverable operational intent
        TD -> TD: Check operational intent discoverable (save)
else #Pink Failure: No operational intent found
end
  
' Inject operational intent modification to Nonconforming state that conflicts with existing OI
TD -> USSInter++: Inject conflicting operational intent modification (Nonconforming)\nPUT /flight_plans/{flight_plan_id}
USS -> DSS++: PUT /dss/v1/operational_intent_references/{entity_id}
return 201, {"subscribers": [], "operational_intent_reference": {...}}
alt #GhostWhite Pass: Allowed conflict 
        TD <-- USSInter: 200, {"planning_result": "Completed"}
else #Pink Failure: Disallowed conflict
        TD <-- USSInter--: 200, {"planning_result": "Rejected"}
end

' Verify operational intent modified and created conflict
TD -> DSS++: Retrieve discoverable operational intents\nPOST /dss/v1/operational_intent_references/query
return 200, {"operational_intent_references": [...]}

' Verify conflict details
TD -> USSInter++: Retrieve operational intent details\nGET /uss/v1/operational_intents/{entity_id}
return 200, {"operational_intent": {...}}

alt #GhostWhite Pass: Allowed conflict
        TD -> TD: Check that operational intent was modified to Nonconforming and conflicts with preexisting operational intent
else #Pink Failure: Nonconforming operational intent not added or no conflict
end
 
TD -> TD: wait for 12 seconds

TD -> USSInter++: Retrieve notification message log\nGET uss/v1/user_notifications?from=[ISO_DATETIME]&to=[ISO_DATETIME]
return 200, {...}
note right
interUSS working draft
"F3548-21 - User notification test"
end note

loop For every USS user notification
alt #GhostWhite Pass: USS sent conflict notification to user in time
    TD -> TD: USS sent user required conflict notification within required time
else #Pink Failure: USS did not send notification to user or notification not sent in time
    TD -> TD: USS did not send user notification or notification exceeded required time
end
end

 
== Teardown ==
' terminate operational intent
TD -> OUSS++: Remove operational intent\nDELETE /flight_plans/{flight_plan_id}
OUSS -> DSS++: DELETE /dss/v1/operational_intent_references/{entity_id}/{ovn}
return 200, {"subscribers": [], "operational_intent_reference": {...}}
TD <-- OUSS--: 200, {"planning_result": "Completed"}

' terminate operational intent
TD -> USSInter++: Remove operational intent\nDELETE /flight_plans/{flight_plan_id}
USS -> DSS++: DELETE /dss/v1/operational_intent_references/{entity_id}/{ovn}
return 200, {"subscribers": [], "operational_intent_reference": {...}}
TD <-- USSInter--: 200, {"planning_result": "Completed"}



@enduml